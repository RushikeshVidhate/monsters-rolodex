{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","Search","placeholder","handleOnChange","type","onChange","App","e","setState","searchQuery","target","value","state","fetch","then","response","json","users","filteredMonsters","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAGe,SAASA,EAAKC,GACzB,OACI,yBAAKC,UAAU,QACf,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,2BAAqEC,IAAI,YAC9E,4BAAKL,EAAMG,QAAQG,MACnB,4BAAKN,EAAMG,QAAQI,QCQfC,MAbf,SAAkBR,GACd,OACI,yBAAKC,UAAU,aAEXD,EAAMS,SAASC,KAAI,SAACP,GAElB,OAAO,kBAACJ,EAAD,CAAMY,IAAKR,EAAQC,GAAID,QAASA,SCItCS,EAXO,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eACjC,OACI,2BACAC,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCFGG,G,kBACnB,aAAc,IAAD,8BACX,+CAOFH,eAAiB,SAACI,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJJ,E,iFAWO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAWmB,S,+BAGjC,IAAD,OACHC,EAAmBC,KAAKP,MAAMd,SAASsB,QAAO,SAAA5B,GAAO,OAAGA,EAAO,KAAS6B,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAC1H,OACE,yBAAK/B,UAAU,OACb,0DACA,oEACA,kBAAC,EAAD,CACAY,YAAc,iBACdC,eAAgBgB,KAAKhB,iBAErB,kBAAC,EAAD,CAAUL,SAAUoB,S,GA5BKK,cCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.1bb9af55.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css';\r\n\r\nexport default function Card(props) {\r\n    return (\r\n        <div className='card'>\r\n        <img src={`https://robohash.org/${props.monster.id}2?set=set1&size=150x150`} alt=\"monster\" />\r\n           <h2>{props.monster.name}</h2> \r\n           <h5>{props.monster.email}</h5>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport Card from '../card/card.component'\r\nfunction CardList(props) {\r\n    return (\r\n        <div className='card-list'>\r\n        {\r\n            props.monsters.map((monster) =>{\r\n              \r\n              return <Card key={monster.id} monster={monster}/>\r\n            } )\r\n          }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nexport const Search = ({placeholder, handleOnChange}) => {\r\n    return (\r\n        <input \r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={handleOnChange}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Search;","import React, { Component } from 'react'\nimport CardList from './components/card-list/card-list.component';\nimport Search from './components/search/search.component';\n\nimport './App.css';\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchQuery: ''\n    };\n  }\n\n  handleOnChange = (e) => {\n    this.setState({searchQuery: e.target.value})\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}) );\n  }\n\n  render() {\n    let filteredMonsters = this.state.monsters.filter(monster =>monster['name'].toLowerCase().includes(this.state.searchQuery.toLowerCase()))\n    return (\n      <div className='app'>\n        <h1>Welcome to Monster Rolodex</h1>\n        <h4>Built using simple React Application</h4>\n        <Search \n        placeholder = \"Type robo name\"\n        handleOnChange={this.handleOnChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}